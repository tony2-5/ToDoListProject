(()=>{"use strict";var t={28:(t,e,n)=>{n.d(e,{Z:()=>u});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([t.id,'html {\n  height: 100vh;\n  width: 100vw;\n}\nbody {\n  margin:0;\n  display: grid;\n  grid-template-columns: repeat(4, 25vw);\n  grid-template-rows: repeat(5, 20vh);\n  grid-template-areas: \n    "header header header header"\n    "sideBar content content content"\n    "sideBar content content content"\n    "sideBar content content content"\n    "sideBar content content content";\n}\n#header {\n  grid-area: header;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 2vw;\n  background-color: #E8F3FB;\n  border: 3px solid #171819;\n}\n#header div>img {\n  height: 10vh;\n}\n#sideBar {\n  display: flex;\n  flex-direction: column;\n  grid-area: sideBar;\n  background-color: #E8F3FB;\n  border: 3px solid #171819;\n  align-items: center;\n}\n#sideBar button {\n  width: 15vw;\n  height:5vh;\n}\n#content {\n  grid-area: content;\n  background-color: #E8F3FB;\n  display: flex;\n  flex-direction: column;\n  border: 3px solid #171819;\n  gap: 1vh;\n}\n.toDoItem {\n  display: flex;\n  gap:3vw;\n  border-radius: 10px;\n  border-top: 2px solid #f3cdd0;\n  border-bottom: 2px solid #f3cdd0;\n  align-items: center;\n}\n.toDoItem div {\n  background-color: #f3cdd0;\n  border-radius: 10px;\n  display: flex;\n  height: 100%;\n}\n#addToDo form {\n  flex-wrap: wrap;\n  background-color: #E8fbc4;\n  padding-right: 3vw;\n  padding-left: 3vw;\n  padding-bottom: 1vh;\n  padding-top: 1vh;\n  border-radius: 10px;\n  gap: 3vw;\n  display: flex;\n  justify-content: center;\n}\n#addToDo form div {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n}\n#addToDo form button {\n  align-self: center;\n  width: 5vw;\n  height: 4vh;\n}\n#newProjectOverlay {\n  position: absolute;\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(0,0,0,.7);\n}\n#newProjectOverlay form {\n  display: flex;\n  flex-direction: column;\n}\n#newProjectOverlay button {\n  width: 15vw;\n  height: 3vh;\n}\n.projects {\n  display: flex;\n  align-items: center;\n}\n#selectedProject {\n  border-style: inset;\n}\n#toDoOverlay {\n  position: absolute;\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(0,0,0,.7);\n}\n#toDoOverlayInnerDiv {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: white;\n  width: 25vw;\n  padding: 5vw;\n  border-radius: 10px;\n  z-index: 1;\n}\n#toDoOverlayInnerDiv div {\n  display: flex;\n  align-items: center;\n  gap: 2vw;\n}\n#toDoOverlayInnerDiv p {\n  word-break: break-all;\n}',"",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,YAAY;AACd;AACA;EACE,QAAQ;EACR,aAAa;EACb,sCAAsC;EACtC,mCAAmC;EACnC;;;;;qCAKmC;AACrC;AACA;EACE,iBAAiB;EACjB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,QAAQ;EACR,yBAAyB;EACzB,yBAAyB;AAC3B;AACA;EACE,YAAY;AACd;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,kBAAkB;EAClB,yBAAyB;EACzB,yBAAyB;EACzB,mBAAmB;AACrB;AACA;EACE,WAAW;EACX,UAAU;AACZ;AACA;EACE,kBAAkB;EAClB,yBAAyB;EACzB,aAAa;EACb,sBAAsB;EACtB,yBAAyB;EACzB,QAAQ;AACV;AACA;EACE,aAAa;EACb,OAAO;EACP,mBAAmB;EACnB,6BAA6B;EAC7B,gCAAgC;EAChC,mBAAmB;AACrB;AACA;EACE,yBAAyB;EACzB,mBAAmB;EACnB,aAAa;EACb,YAAY;AACd;AACA;EACE,eAAe;EACf,yBAAyB;EACzB,kBAAkB;EAClB,iBAAiB;EACjB,mBAAmB;EACnB,gBAAgB;EAChB,mBAAmB;EACnB,QAAQ;EACR,aAAa;EACb,uBAAuB;AACzB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,sBAAsB;AACxB;AACA;EACE,kBAAkB;EAClB,UAAU;EACV,WAAW;AACb;AACA;EACE,kBAAkB;EAClB,aAAa;EACb,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,gCAAgC;AAClC;AACA;EACE,aAAa;EACb,sBAAsB;AACxB;AACA;EACE,WAAW;EACX,WAAW;AACb;AACA;EACE,aAAa;EACb,mBAAmB;AACrB;AACA;EACE,mBAAmB;AACrB;AACA;EACE,kBAAkB;EAClB,aAAa;EACb,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,gCAAgC;AAClC;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,uBAAuB;EACvB,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,UAAU;AACZ;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,QAAQ;AACV;AACA;EACE,qBAAqB;AACvB",sourcesContent:['html {\r\n  height: 100vh;\r\n  width: 100vw;\r\n}\r\nbody {\r\n  margin:0;\r\n  display: grid;\r\n  grid-template-columns: repeat(4, 25vw);\r\n  grid-template-rows: repeat(5, 20vh);\r\n  grid-template-areas: \r\n    "header header header header"\r\n    "sideBar content content content"\r\n    "sideBar content content content"\r\n    "sideBar content content content"\r\n    "sideBar content content content";\r\n}\r\n#header {\r\n  grid-area: header;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 2vw;\r\n  background-color: #E8F3FB;\r\n  border: 3px solid #171819;\r\n}\r\n#header div>img {\r\n  height: 10vh;\r\n}\r\n#sideBar {\r\n  display: flex;\r\n  flex-direction: column;\r\n  grid-area: sideBar;\r\n  background-color: #E8F3FB;\r\n  border: 3px solid #171819;\r\n  align-items: center;\r\n}\r\n#sideBar button {\r\n  width: 15vw;\r\n  height:5vh;\r\n}\r\n#content {\r\n  grid-area: content;\r\n  background-color: #E8F3FB;\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: 3px solid #171819;\r\n  gap: 1vh;\r\n}\r\n.toDoItem {\r\n  display: flex;\r\n  gap:3vw;\r\n  border-radius: 10px;\r\n  border-top: 2px solid #f3cdd0;\r\n  border-bottom: 2px solid #f3cdd0;\r\n  align-items: center;\r\n}\r\n.toDoItem div {\r\n  background-color: #f3cdd0;\r\n  border-radius: 10px;\r\n  display: flex;\r\n  height: 100%;\r\n}\r\n#addToDo form {\r\n  flex-wrap: wrap;\r\n  background-color: #E8fbc4;\r\n  padding-right: 3vw;\r\n  padding-left: 3vw;\r\n  padding-bottom: 1vh;\r\n  padding-top: 1vh;\r\n  border-radius: 10px;\r\n  gap: 3vw;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n#addToDo form div {\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n}\r\n#addToDo form button {\r\n  align-self: center;\r\n  width: 5vw;\r\n  height: 4vh;\r\n}\r\n#newProjectOverlay {\r\n  position: absolute;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: rgba(0,0,0,.7);\r\n}\r\n#newProjectOverlay form {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n#newProjectOverlay button {\r\n  width: 15vw;\r\n  height: 3vh;\r\n}\r\n.projects {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n#selectedProject {\r\n  border-style: inset;\r\n}\r\n#toDoOverlay {\r\n  position: absolute;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: rgba(0,0,0,.7);\r\n}\r\n#toDoOverlayInnerDiv {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background-color: white;\r\n  width: 25vw;\r\n  padding: 5vw;\r\n  border-radius: 10px;\r\n  z-index: 1;\r\n}\r\n#toDoOverlayInnerDiv div {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 2vw;\r\n}\r\n#toDoOverlayInnerDiv p {\r\n  word-break: break-all;\r\n}'],sourceRoot:""}]);const u=i},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,a,o){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var u=0;u<this.length;u++){var c=this[u][0];null!=c&&(i[c]=!0)}for(var l=0;l<t.length;l++){var s=[].concat(t[l]);r&&i[s[0]]||(void 0!==o&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=o),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),a&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=a):s[4]="".concat(a)),e.push(s))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},i=[],u=0;u<t.length;u++){var c=t[u],l=r.base?c[0]+r.base:c[0],s=o[l]||0,d="".concat(l," ").concat(s);o[l]=s+1;var f=n(d),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==f)e[f].references++,e[f].updater(h);else{var m=a(h,r);r.byIndex=u,e.splice(u,0,{identifier:d,updater:m,references:1})}i.push(d)}return i}function a(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,a){var o=r(t=t||[],a=a||{});return function(t){t=t||[];for(var i=0;i<o.length;i++){var u=n(o[i]);e[u].references--}for(var c=r(t,a),l=0;l<o.length;l++){var s=n(o[l]);0===e[s].references&&(e[s].updater(),e.splice(s,1))}o=c}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");if(r.length)for(var a=r.length-1;a>-1&&!t;)t=r[a--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.nc=void 0,(()=>{var t=n(379),e=n.n(t),r=n(795),a=n.n(r),o=n(569),i=n.n(o),u=n(565),c=n.n(u),l=n(216),s=n.n(l),d=n(589),f=n.n(d),h=n(28),m={};m.styleTagTransform=f(),m.setAttributes=c(),m.insert=i().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=s(),e()(h.Z,m),h.Z&&h.Z.locals&&h.Z.locals;class v{itemArr=[];constructor(t){this.projectName=t}addToDo(t){this.itemArr.push(t)}removeToDo(t){this.itemArr=this.itemArr.filter((e=>e.key!==t.key))}assignToDoClass(){for(let t=0;t<this.itemArr.length;t++)this.itemArr[t]=Object.assign(new p,this.itemArr[t])}}class p{static#t=0;checked=0;constructor(t,e,n,r){this.key=p.#t++,this.title=t,this.description=e,this.dueDate=n,this.priority=r}setTitle(t){this.title=t}setDescription(t){this.description=t}setdueDate(t){this.dueDate=t}setPriority(t){this.priority=t}changeCheckStatus(){this.checked=this.checked?0:1}}class y{static#e=[];static#n="Main";addProject(t){y.#e.push(t)}removeProject(t){y.#e=y.#e.filter((e=>e.projectName!==t.projectName))}getProjects(){return y.#e}persistProjects(t){for(let e=0;e<t.length;e++){let n=Object.assign(new v,t[e]);n.assignToDoClass(),this.addProject(n)}}replaceMainProject(t){console.log(y.#e),y.#e[0]=t,console.log(y.#e)}getCurrentProject(){for(let t=0;t<y.#e.length;t++)if(y.#e[t].projectName===y.#n)return y.#e[t]}getCurrentProjectIndex(){for(let t=0;t<y.#e.length;t++)if(y.#e[t].projectName===y.#n)return t}setCurrentProject(t){y.#n=t.projectName}includesProject(t){return null!=y.#e.find((e=>e.projectName===t))}}function g(){const t=document.createElement("div"),e=document.createElement("form"),n=document.createElement("input"),r=document.createElement("label"),a=document.createElement("button"),o=document.createElement("button");t.setAttribute("id","newProjectOverlay"),n.setAttribute("type","text"),n.setAttribute("name","projectName"),r.setAttribute("for","projectName"),r.textContent="Enter project name: ",a.textContent="Submit",a.addEventListener("click",(t=>{const r=new y;0===n.value.trim().length?(t.preventDefault(),alert("Project name cannot be empty!")):r.includesProject(n.value)?(t.preventDefault(),alert("Can not have duplicate project!")):(t.preventDefault(),fn(n.value),e.reset())})),o.textContent="Close",o.addEventListener("click",(()=>{t.remove()})),e.append(r,n,a,o),t.appendChild(e),document.body.appendChild(t)}function w(t){return w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},w(t)}function b(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function A(t){b(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===w(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function C(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function E(t,e){return b(2,arguments),function(t,e){b(2,arguments);var n=A(t).getTime(),r=C(e);return new Date(n+r)}(t,-C(e))}function k(t){b(1,arguments);var e=A(t),n=e.getUTCDay(),r=(n<1?7:0)+n-1;return e.setUTCDate(e.getUTCDate()-r),e.setUTCHours(0,0,0,0),e}function x(t){b(1,arguments);var e=A(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=k(r),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var i=k(o);return e.getTime()>=a.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}function T(t){b(1,arguments);var e=A(t),n=k(e).getTime()-function(t){b(1,arguments);var e=x(t),n=new Date(0);return n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0),k(n)}(e).getTime();return Math.round(n/6048e5)+1}var D={};function B(){return D}function P(t,e){var n,r,a,o,i,u,c,l;b(1,arguments);var s=B(),d=C(null!==(n=null!==(r=null!==(a=null!==(o=null==e?void 0:e.weekStartsOn)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(u=i.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==a?a:s.weekStartsOn)&&void 0!==r?r:null===(c=s.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==n?n:0);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=A(t),h=f.getUTCDay(),m=(h<d?7:0)+h-d;return f.setUTCDate(f.getUTCDate()-m),f.setUTCHours(0,0,0,0),f}function j(t,e){var n,r,a,o,i,u,c,l;b(1,arguments);var s=A(t),d=s.getUTCFullYear(),f=B(),h=C(null!==(n=null!==(r=null!==(a=null!==(o=null==e?void 0:e.firstWeekContainsDate)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(u=i.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:f.firstWeekContainsDate)&&void 0!==r?r:null===(c=f.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==n?n:1);if(!(h>=1&&h<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=new Date(0);m.setUTCFullYear(d+1,0,h),m.setUTCHours(0,0,0,0);var v=P(m,e),p=new Date(0);p.setUTCFullYear(d,0,h),p.setUTCHours(0,0,0,0);var y=P(p,e);return s.getTime()>=v.getTime()?d+1:s.getTime()>=y.getTime()?d:d-1}function M(t,e){b(1,arguments);var n=A(t),r=P(n,e).getTime()-function(t,e){var n,r,a,o,i,u,c,l;b(1,arguments);var s=B(),d=C(null!==(n=null!==(r=null!==(a=null!==(o=null==e?void 0:e.firstWeekContainsDate)&&void 0!==o?o:null==e||null===(i=e.locale)||void 0===i||null===(u=i.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:s.firstWeekContainsDate)&&void 0!==r?r:null===(c=s.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==n?n:1),f=j(t,e),h=new Date(0);return h.setUTCFullYear(f,0,d),h.setUTCHours(0,0,0,0),P(h,e)}(n,e).getTime();return Math.round(r/6048e5)+1}function U(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const S=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return U("yy"===e?r%100:r,e.length)},O=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):U(n+1,2)},N=function(t,e){return U(t.getUTCDate(),e.length)},Y=function(t,e){return U(t.getUTCHours()%12||12,e.length)},I=function(t,e){return U(t.getUTCHours(),e.length)},q=function(t,e){return U(t.getUTCMinutes(),e.length)},L=function(t,e){return U(t.getUTCSeconds(),e.length)},W=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return U(Math.floor(r*Math.pow(10,n-3)),e.length)};var H={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return S(t,e)},Y:function(t,e,n,r){var a=j(t,r),o=a>0?a:1-a;return"YY"===e?U(o%100,2):"Yo"===e?n.ordinalNumber(o,{unit:"year"}):U(o,e.length)},R:function(t,e){return U(x(t),e.length)},u:function(t,e){return U(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return U(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return U(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return O(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return U(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var a=M(t,r);return"wo"===e?n.ordinalNumber(a,{unit:"week"}):U(a,e.length)},I:function(t,e,n){var r=T(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):U(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):N(t,e)},D:function(t,e,n){var r=function(t){b(1,arguments);var e=A(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=n-e.getTime();return Math.floor(r/864e5)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):U(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var a=t.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return U(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var a=t.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return U(o,e.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return U(a,e.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,a=t.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,a=t.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return Y(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):I(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):U(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):U(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):q(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):L(t,e)},S:function(t,e){return W(t,e)},X:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return R(a);case"XXXX":case"XX":return F(a);default:return F(a,":")}},x:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return R(a);case"xxxx":case"xx":return F(a);default:return F(a,":")}},O:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+Q(a,":");default:return"GMT"+F(a,":")}},z:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+Q(a,":");default:return"GMT"+F(a,":")}},t:function(t,e,n,r){var a=r._originalDate||t;return U(Math.floor(a.getTime()/1e3),e.length)},T:function(t,e,n,r){return U((r._originalDate||t).getTime(),e.length)}};function Q(t,e){var n=t>0?"-":"+",r=Math.abs(t),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=e||"";return n+String(a)+i+U(o,2)}function R(t,e){return t%60==0?(t>0?"-":"+")+U(Math.abs(t)/60,2):F(t,e)}function F(t,e){var n=e||"",r=t>0?"-":"+",a=Math.abs(t);return r+U(Math.floor(a/60),2)+n+U(a%60,2)}const X=H;var z=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},G=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const _={p:G,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return z(t,e);switch(a){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",z(a,e)).replace("{{time}}",G(o,e))}};function Z(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var J=["D","DD"],K=["YY","YYYY"];function V(t){return-1!==J.indexOf(t)}function $(t){return-1!==K.indexOf(t)}function tt(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var et={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function nt(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const rt={date:nt({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:nt({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:nt({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var at={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function ot(t){return function(e,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var a=t.defaultFormattingWidth||t.defaultWidth,o=null!=n&&n.width?String(n.width):a;r=t.formattingValues[o]||t.formattingValues[a]}else{var i=t.defaultWidth,u=null!=n&&n.width?String(n.width):t.defaultWidth;r=t.values[u]||t.values[i]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const it={ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:ot({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:ot({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:ot({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:ot({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:ot({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function ut(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],o=e.match(a);if(!o)return null;var i,u=o[0],c=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],l=Array.isArray(c)?function(t,e){for(var n=0;n<t.length;n++)if(t[n].test(u))return n}(c):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&t[n].test(u))return n}(c);return i=t.valueCallback?t.valueCallback(l):l,{value:i=n.valueCallback?n.valueCallback(i):i,rest:e.slice(u.length)}}}var ct,lt={ordinalNumber:(ct={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(ct.matchPattern);if(!n)return null;var r=n[0],a=t.match(ct.parsePattern);if(!a)return null;var o=ct.valueCallback?ct.valueCallback(a[0]):a[0];return{value:o=e.valueCallback?e.valueCallback(o):o,rest:t.slice(r.length)}}),era:ut({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:ut({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:ut({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:ut({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:ut({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const st={code:"en-US",formatDistance:function(t,e,n){var r,a=et[t];return r="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:rt,formatRelative:function(t,e,n,r){return at[t]},localize:it,match:lt,options:{weekStartsOn:0,firstWeekContainsDate:1}};var dt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ft=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ht=/^'([^]*?)'?$/,mt=/''/g,vt=/[a-zA-Z]/;function pt(t,e,n){var r,a,o,i,u,c,l,s,d,f,h,m,v,p,y,g,k,x;b(2,arguments);var T=String(e),D=B(),P=null!==(r=null!==(a=null==n?void 0:n.locale)&&void 0!==a?a:D.locale)&&void 0!==r?r:st,j=C(null!==(o=null!==(i=null!==(u=null!==(c=null==n?void 0:n.firstWeekContainsDate)&&void 0!==c?c:null==n||null===(l=n.locale)||void 0===l||null===(s=l.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==u?u:D.firstWeekContainsDate)&&void 0!==i?i:null===(d=D.locale)||void 0===d||null===(f=d.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==o?o:1);if(!(j>=1&&j<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var M=C(null!==(h=null!==(m=null!==(v=null!==(p=null==n?void 0:n.weekStartsOn)&&void 0!==p?p:null==n||null===(y=n.locale)||void 0===y||null===(g=y.options)||void 0===g?void 0:g.weekStartsOn)&&void 0!==v?v:D.weekStartsOn)&&void 0!==m?m:null===(k=D.locale)||void 0===k||null===(x=k.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==h?h:0);if(!(M>=0&&M<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!P.localize)throw new RangeError("locale must contain localize property");if(!P.formatLong)throw new RangeError("locale must contain formatLong property");var U=A(t);if(!function(t){if(b(1,arguments),!function(t){return b(1,arguments),t instanceof Date||"object"===w(t)&&"[object Date]"===Object.prototype.toString.call(t)}(t)&&"number"!=typeof t)return!1;var e=A(t);return!isNaN(Number(e))}(U))throw new RangeError("Invalid time value");var S=E(U,Z(U)),O={firstWeekContainsDate:j,weekStartsOn:M,locale:P,_originalDate:U};return T.match(ft).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,_[e])(t,P.formatLong):t})).join("").match(dt).map((function(r){if("''"===r)return"'";var a,o,i=r[0];if("'"===i)return(o=(a=r).match(ht))?o[1].replace(mt,"'"):a;var u=X[i];if(u)return null!=n&&n.useAdditionalWeekYearTokens||!$(r)||tt(r,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!V(r)||tt(r,e,String(t)),u(S,r,P.localize,O);if(i.match(vt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return r})).join("")}function yt(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}function gt(t,e){var n="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!n){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return yt(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?yt(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var r=0,a=function(){};return{s:a,n:function(){return r>=t.length?{done:!0}:{done:!1,value:t[r++]}},e:function(t){throw t},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,u=!1;return{s:function(){n=n.call(t)},n:function(){var t=n.next();return i=t.done,t},e:function(t){u=!0,o=t},f:function(){try{i||null==n.return||n.return()}finally{if(u)throw o}}}}function wt(t,e){if(null==t)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}function bt(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function At(t,e){return At=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},At(t,e)}function Ct(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&At(t,e)}function Et(t){return Et=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Et(t)}function kt(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var n,r=Et(t);if(e){var a=Et(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return function(t,e){if(e&&("object"===w(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return bt(t)}(this,n)}}function xt(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function Tt(t){var e=function(t,e){if("object"!==w(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var r=n.call(t,"string");if("object"!==w(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===w(e)?e:String(e)}function Dt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,Tt(r.key),r)}}function Bt(t,e,n){return e&&Dt(t.prototype,e),n&&Dt(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function Pt(t,e,n){return(e=Tt(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var jt=function(){function t(){xt(this,t),Pt(this,"priority",void 0),Pt(this,"subPriority",0)}return Bt(t,[{key:"validate",value:function(t,e){return!0}}]),t}(),Mt=function(t){Ct(n,t);var e=kt(n);function n(t,r,a,o,i){var u;return xt(this,n),(u=e.call(this)).value=t,u.validateValue=r,u.setValue=a,u.priority=o,i&&(u.subPriority=i),u}return Bt(n,[{key:"validate",value:function(t,e){return this.validateValue(t,this.value,e)}},{key:"set",value:function(t,e,n){return this.setValue(t,e,this.value,n)}}]),n}(jt),Ut=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",10),Pt(bt(t),"subPriority",-1),t}return Bt(n,[{key:"set",value:function(t,e){if(e.timestampIsSet)return t;var n=new Date(0);return n.setFullYear(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),n.setHours(t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCMilliseconds()),n}}]),n}(jt),St=function(){function t(){xt(this,t),Pt(this,"incompatibleTokens",void 0),Pt(this,"priority",void 0),Pt(this,"subPriority",void 0)}return Bt(t,[{key:"run",value:function(t,e,n,r){var a=this.parse(t,e,n,r);return a?{setter:new Mt(a.value,this.validate,this.set,this.priority,this.subPriority),rest:a.rest}:null}},{key:"validate",value:function(t,e,n){return!0}}]),t}(),Ot=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",140),Pt(bt(t),"incompatibleTokens",["R","u","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){switch(e){case"G":case"GG":case"GGG":return n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"});case"GGGGG":return n.era(t,{width:"narrow"});default:return n.era(t,{width:"wide"})||n.era(t,{width:"abbreviated"})||n.era(t,{width:"narrow"})}}},{key:"set",value:function(t,e,n){return e.era=n,t.setUTCFullYear(n,0,1),t.setUTCHours(0,0,0,0),t}}]),n}(St),Nt=(Math.pow(10,8),/^(1[0-2]|0?\d)/),Yt=/^(3[0-1]|[0-2]?\d)/,It=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,qt=/^(5[0-3]|[0-4]?\d)/,Lt=/^(2[0-3]|[0-1]?\d)/,Wt=/^(2[0-4]|[0-1]?\d)/,Ht=/^(1[0-1]|0?\d)/,Qt=/^(1[0-2]|0?\d)/,Rt=/^[0-5]?\d/,Ft=/^[0-5]?\d/,Xt=/^\d/,zt=/^\d{1,2}/,Gt=/^\d{1,3}/,_t=/^\d{1,4}/,Zt=/^-?\d+/,Jt=/^-?\d/,Kt=/^-?\d{1,2}/,Vt=/^-?\d{1,3}/,$t=/^-?\d{1,4}/,te=/^([+-])(\d{2})(\d{2})?|Z/,ee=/^([+-])(\d{2})(\d{2})|Z/,ne=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,re=/^([+-])(\d{2}):(\d{2})|Z/,ae=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function oe(t,e){return t?{value:e(t.value),rest:t.rest}:t}function ie(t,e){var n=e.match(t);return n?{value:parseInt(n[0],10),rest:e.slice(n[0].length)}:null}function ue(t,e){var n=e.match(t);return n?"Z"===n[0]?{value:0,rest:e.slice(1)}:{value:("+"===n[1]?1:-1)*(36e5*(n[2]?parseInt(n[2],10):0)+6e4*(n[3]?parseInt(n[3],10):0)+1e3*(n[5]?parseInt(n[5],10):0)),rest:e.slice(n[0].length)}:null}function ce(t){return ie(Zt,t)}function le(t,e){switch(t){case 1:return ie(Xt,e);case 2:return ie(zt,e);case 3:return ie(Gt,e);case 4:return ie(_t,e);default:return ie(new RegExp("^\\d{1,"+t+"}"),e)}}function se(t,e){switch(t){case 1:return ie(Jt,e);case 2:return ie(Kt,e);case 3:return ie(Vt,e);case 4:return ie($t,e);default:return ie(new RegExp("^-?\\d{1,"+t+"}"),e)}}function de(t){switch(t){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}}function fe(t,e){var n,r=e>0,a=r?e:1-e;if(a<=50)n=t||100;else{var o=a+50;n=t+100*Math.floor(o/100)-(t>=o%100?100:0)}return r?n:1-n}function he(t){return t%400==0||t%4==0&&t%100!=0}var me=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",130),Pt(bt(t),"incompatibleTokens",["Y","R","u","w","I","i","e","c","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){var r=function(t){return{year:t,isTwoDigitYear:"yy"===e}};switch(e){case"y":return oe(le(4,t),r);case"yo":return oe(n.ordinalNumber(t,{unit:"year"}),r);default:return oe(le(e.length,t),r)}}},{key:"validate",value:function(t,e){return e.isTwoDigitYear||e.year>0}},{key:"set",value:function(t,e,n){var r=t.getUTCFullYear();if(n.isTwoDigitYear){var a=fe(n.year,r);return t.setUTCFullYear(a,0,1),t.setUTCHours(0,0,0,0),t}var o="era"in e&&1!==e.era?1-n.year:n.year;return t.setUTCFullYear(o,0,1),t.setUTCHours(0,0,0,0),t}}]),n}(St),ve=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",130),Pt(bt(t),"incompatibleTokens",["y","R","u","Q","q","M","L","I","d","D","i","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){var r=function(t){return{year:t,isTwoDigitYear:"YY"===e}};switch(e){case"Y":return oe(le(4,t),r);case"Yo":return oe(n.ordinalNumber(t,{unit:"year"}),r);default:return oe(le(e.length,t),r)}}},{key:"validate",value:function(t,e){return e.isTwoDigitYear||e.year>0}},{key:"set",value:function(t,e,n,r){var a=j(t,r);if(n.isTwoDigitYear){var o=fe(n.year,a);return t.setUTCFullYear(o,0,r.firstWeekContainsDate),t.setUTCHours(0,0,0,0),P(t,r)}var i="era"in e&&1!==e.era?1-n.year:n.year;return t.setUTCFullYear(i,0,r.firstWeekContainsDate),t.setUTCHours(0,0,0,0),P(t,r)}}]),n}(St),pe=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",130),Pt(bt(t),"incompatibleTokens",["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e){return se("R"===e?4:e.length,t)}},{key:"set",value:function(t,e,n){var r=new Date(0);return r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0),k(r)}}]),n}(St),ye=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",130),Pt(bt(t),"incompatibleTokens",["G","y","Y","R","w","I","i","e","c","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e){return se("u"===e?4:e.length,t)}},{key:"set",value:function(t,e,n){return t.setUTCFullYear(n,0,1),t.setUTCHours(0,0,0,0),t}}]),n}(St),ge=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",120),Pt(bt(t),"incompatibleTokens",["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){switch(e){case"Q":case"QQ":return le(e.length,t);case"Qo":return n.ordinalNumber(t,{unit:"quarter"});case"QQQ":return n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"});case"QQQQQ":return n.quarter(t,{width:"narrow",context:"formatting"});default:return n.quarter(t,{width:"wide",context:"formatting"})||n.quarter(t,{width:"abbreviated",context:"formatting"})||n.quarter(t,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(t,e){return e>=1&&e<=4}},{key:"set",value:function(t,e,n){return t.setUTCMonth(3*(n-1),1),t.setUTCHours(0,0,0,0),t}}]),n}(St),we=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",120),Pt(bt(t),"incompatibleTokens",["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){switch(e){case"q":case"qq":return le(e.length,t);case"qo":return n.ordinalNumber(t,{unit:"quarter"});case"qqq":return n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"});case"qqqqq":return n.quarter(t,{width:"narrow",context:"standalone"});default:return n.quarter(t,{width:"wide",context:"standalone"})||n.quarter(t,{width:"abbreviated",context:"standalone"})||n.quarter(t,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(t,e){return e>=1&&e<=4}},{key:"set",value:function(t,e,n){return t.setUTCMonth(3*(n-1),1),t.setUTCHours(0,0,0,0),t}}]),n}(St),be=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"incompatibleTokens",["Y","R","q","Q","L","w","I","D","i","e","c","t","T"]),Pt(bt(t),"priority",110),t}return Bt(n,[{key:"parse",value:function(t,e,n){var r=function(t){return t-1};switch(e){case"M":return oe(ie(Nt,t),r);case"MM":return oe(le(2,t),r);case"Mo":return oe(n.ordinalNumber(t,{unit:"month"}),r);case"MMM":return n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"});case"MMMMM":return n.month(t,{width:"narrow",context:"formatting"});default:return n.month(t,{width:"wide",context:"formatting"})||n.month(t,{width:"abbreviated",context:"formatting"})||n.month(t,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=11}},{key:"set",value:function(t,e,n){return t.setUTCMonth(n,1),t.setUTCHours(0,0,0,0),t}}]),n}(St),Ae=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",110),Pt(bt(t),"incompatibleTokens",["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){var r=function(t){return t-1};switch(e){case"L":return oe(ie(Nt,t),r);case"LL":return oe(le(2,t),r);case"Lo":return oe(n.ordinalNumber(t,{unit:"month"}),r);case"LLL":return n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"});case"LLLLL":return n.month(t,{width:"narrow",context:"standalone"});default:return n.month(t,{width:"wide",context:"standalone"})||n.month(t,{width:"abbreviated",context:"standalone"})||n.month(t,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=11}},{key:"set",value:function(t,e,n){return t.setUTCMonth(n,1),t.setUTCHours(0,0,0,0),t}}]),n}(St),Ce=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",100),Pt(bt(t),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","i","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){switch(e){case"w":return ie(qt,t);case"wo":return n.ordinalNumber(t,{unit:"week"});default:return le(e.length,t)}}},{key:"validate",value:function(t,e){return e>=1&&e<=53}},{key:"set",value:function(t,e,n,r){return P(function(t,e,n){b(2,arguments);var r=A(t),a=C(e),o=M(r,n)-a;return r.setUTCDate(r.getUTCDate()-7*o),r}(t,n,r),r)}}]),n}(St),Ee=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",100),Pt(bt(t),"incompatibleTokens",["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){switch(e){case"I":return ie(qt,t);case"Io":return n.ordinalNumber(t,{unit:"week"});default:return le(e.length,t)}}},{key:"validate",value:function(t,e){return e>=1&&e<=53}},{key:"set",value:function(t,e,n){return k(function(t,e){b(2,arguments);var n=A(t),r=C(e),a=T(n)-r;return n.setUTCDate(n.getUTCDate()-7*a),n}(t,n))}}]),n}(St),ke=[31,28,31,30,31,30,31,31,30,31,30,31],xe=[31,29,31,30,31,30,31,31,30,31,30,31],Te=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",90),Pt(bt(t),"subPriority",1),Pt(bt(t),"incompatibleTokens",["Y","R","q","Q","w","I","D","i","e","c","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){switch(e){case"d":return ie(Yt,t);case"do":return n.ordinalNumber(t,{unit:"date"});default:return le(e.length,t)}}},{key:"validate",value:function(t,e){var n=he(t.getUTCFullYear()),r=t.getUTCMonth();return n?e>=1&&e<=xe[r]:e>=1&&e<=ke[r]}},{key:"set",value:function(t,e,n){return t.setUTCDate(n),t.setUTCHours(0,0,0,0),t}}]),n}(St),De=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",90),Pt(bt(t),"subpriority",1),Pt(bt(t),"incompatibleTokens",["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){switch(e){case"D":case"DD":return ie(It,t);case"Do":return n.ordinalNumber(t,{unit:"date"});default:return le(e.length,t)}}},{key:"validate",value:function(t,e){return he(t.getUTCFullYear())?e>=1&&e<=366:e>=1&&e<=365}},{key:"set",value:function(t,e,n){return t.setUTCMonth(0,n),t.setUTCHours(0,0,0,0),t}}]),n}(St);function Be(t,e,n){var r,a,o,i,u,c,l,s;b(2,arguments);var d=B(),f=C(null!==(r=null!==(a=null!==(o=null!==(i=null==n?void 0:n.weekStartsOn)&&void 0!==i?i:null==n||null===(u=n.locale)||void 0===u||null===(c=u.options)||void 0===c?void 0:c.weekStartsOn)&&void 0!==o?o:d.weekStartsOn)&&void 0!==a?a:null===(l=d.locale)||void 0===l||null===(s=l.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==r?r:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var h=A(t),m=C(e),v=((m%7+7)%7<f?7:0)+m-h.getUTCDay();return h.setUTCDate(h.getUTCDate()+v),h}var Pe=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",90),Pt(bt(t),"incompatibleTokens",["D","i","e","c","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){switch(e){case"E":case"EE":case"EEE":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"EEEEE":return n.day(t,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=6}},{key:"set",value:function(t,e,n,r){return(t=Be(t,n,r)).setUTCHours(0,0,0,0),t}}]),n}(St),je=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",90),Pt(bt(t),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n,r){var a=function(t){var e=7*Math.floor((t-1)/7);return(t+r.weekStartsOn+6)%7+e};switch(e){case"e":case"ee":return oe(le(e.length,t),a);case"eo":return oe(n.ordinalNumber(t,{unit:"day"}),a);case"eee":return n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});case"eeeee":return n.day(t,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"});default:return n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=6}},{key:"set",value:function(t,e,n,r){return(t=Be(t,n,r)).setUTCHours(0,0,0,0),t}}]),n}(St),Me=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",90),Pt(bt(t),"incompatibleTokens",["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n,r){var a=function(t){var e=7*Math.floor((t-1)/7);return(t+r.weekStartsOn+6)%7+e};switch(e){case"c":case"cc":return oe(le(e.length,t),a);case"co":return oe(n.ordinalNumber(t,{unit:"day"}),a);case"ccc":return n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});case"ccccc":return n.day(t,{width:"narrow",context:"standalone"});case"cccccc":return n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"});default:return n.day(t,{width:"wide",context:"standalone"})||n.day(t,{width:"abbreviated",context:"standalone"})||n.day(t,{width:"short",context:"standalone"})||n.day(t,{width:"narrow",context:"standalone"})}}},{key:"validate",value:function(t,e){return e>=0&&e<=6}},{key:"set",value:function(t,e,n,r){return(t=Be(t,n,r)).setUTCHours(0,0,0,0),t}}]),n}(St),Ue=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",90),Pt(bt(t),"incompatibleTokens",["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){var r=function(t){return 0===t?7:t};switch(e){case"i":case"ii":return le(e.length,t);case"io":return n.ordinalNumber(t,{unit:"day"});case"iii":return oe(n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r);case"iiiii":return oe(n.day(t,{width:"narrow",context:"formatting"}),r);case"iiiiii":return oe(n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r);default:return oe(n.day(t,{width:"wide",context:"formatting"})||n.day(t,{width:"abbreviated",context:"formatting"})||n.day(t,{width:"short",context:"formatting"})||n.day(t,{width:"narrow",context:"formatting"}),r)}}},{key:"validate",value:function(t,e){return e>=1&&e<=7}},{key:"set",value:function(t,e,n){return t=function(t,e){b(2,arguments);var n=C(e);n%7==0&&(n-=7);var r=A(t),a=((n%7+7)%7<1?7:0)+n-r.getUTCDay();return r.setUTCDate(r.getUTCDate()+a),r}(t,n),t.setUTCHours(0,0,0,0),t}}]),n}(St),Se=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",80),Pt(bt(t),"incompatibleTokens",["b","B","H","k","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){switch(e){case"a":case"aa":case"aaa":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"aaaaa":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(t,e,n){return t.setUTCHours(de(n),0,0,0),t}}]),n}(St),Oe=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",80),Pt(bt(t),"incompatibleTokens",["a","B","H","k","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){switch(e){case"b":case"bb":case"bbb":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"bbbbb":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(t,e,n){return t.setUTCHours(de(n),0,0,0),t}}]),n}(St),Ne=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",80),Pt(bt(t),"incompatibleTokens",["a","b","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){switch(e){case"B":case"BB":case"BBB":return n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"});case"BBBBB":return n.dayPeriod(t,{width:"narrow",context:"formatting"});default:return n.dayPeriod(t,{width:"wide",context:"formatting"})||n.dayPeriod(t,{width:"abbreviated",context:"formatting"})||n.dayPeriod(t,{width:"narrow",context:"formatting"})}}},{key:"set",value:function(t,e,n){return t.setUTCHours(de(n),0,0,0),t}}]),n}(St),Ye=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",70),Pt(bt(t),"incompatibleTokens",["H","K","k","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){switch(e){case"h":return ie(Qt,t);case"ho":return n.ordinalNumber(t,{unit:"hour"});default:return le(e.length,t)}}},{key:"validate",value:function(t,e){return e>=1&&e<=12}},{key:"set",value:function(t,e,n){var r=t.getUTCHours()>=12;return r&&n<12?t.setUTCHours(n+12,0,0,0):r||12!==n?t.setUTCHours(n,0,0,0):t.setUTCHours(0,0,0,0),t}}]),n}(St),Ie=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",70),Pt(bt(t),"incompatibleTokens",["a","b","h","K","k","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){switch(e){case"H":return ie(Lt,t);case"Ho":return n.ordinalNumber(t,{unit:"hour"});default:return le(e.length,t)}}},{key:"validate",value:function(t,e){return e>=0&&e<=23}},{key:"set",value:function(t,e,n){return t.setUTCHours(n,0,0,0),t}}]),n}(St),qe=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",70),Pt(bt(t),"incompatibleTokens",["h","H","k","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){switch(e){case"K":return ie(Ht,t);case"Ko":return n.ordinalNumber(t,{unit:"hour"});default:return le(e.length,t)}}},{key:"validate",value:function(t,e){return e>=0&&e<=11}},{key:"set",value:function(t,e,n){return t.getUTCHours()>=12&&n<12?t.setUTCHours(n+12,0,0,0):t.setUTCHours(n,0,0,0),t}}]),n}(St),Le=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",70),Pt(bt(t),"incompatibleTokens",["a","b","h","H","K","t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){switch(e){case"k":return ie(Wt,t);case"ko":return n.ordinalNumber(t,{unit:"hour"});default:return le(e.length,t)}}},{key:"validate",value:function(t,e){return e>=1&&e<=24}},{key:"set",value:function(t,e,n){var r=n<=24?n%24:n;return t.setUTCHours(r,0,0,0),t}}]),n}(St),We=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",60),Pt(bt(t),"incompatibleTokens",["t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){switch(e){case"m":return ie(Rt,t);case"mo":return n.ordinalNumber(t,{unit:"minute"});default:return le(e.length,t)}}},{key:"validate",value:function(t,e){return e>=0&&e<=59}},{key:"set",value:function(t,e,n){return t.setUTCMinutes(n,0,0),t}}]),n}(St),He=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",50),Pt(bt(t),"incompatibleTokens",["t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e,n){switch(e){case"s":return ie(Ft,t);case"so":return n.ordinalNumber(t,{unit:"second"});default:return le(e.length,t)}}},{key:"validate",value:function(t,e){return e>=0&&e<=59}},{key:"set",value:function(t,e,n){return t.setUTCSeconds(n,0),t}}]),n}(St),Qe=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",30),Pt(bt(t),"incompatibleTokens",["t","T"]),t}return Bt(n,[{key:"parse",value:function(t,e){return oe(le(e.length,t),(function(t){return Math.floor(t*Math.pow(10,3-e.length))}))}},{key:"set",value:function(t,e,n){return t.setUTCMilliseconds(n),t}}]),n}(St),Re=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",10),Pt(bt(t),"incompatibleTokens",["t","T","x"]),t}return Bt(n,[{key:"parse",value:function(t,e){switch(e){case"X":return ue(te,t);case"XX":return ue(ee,t);case"XXXX":return ue(ne,t);case"XXXXX":return ue(ae,t);default:return ue(re,t)}}},{key:"set",value:function(t,e,n){return e.timestampIsSet?t:new Date(t.getTime()-n)}}]),n}(St),Fe=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",10),Pt(bt(t),"incompatibleTokens",["t","T","X"]),t}return Bt(n,[{key:"parse",value:function(t,e){switch(e){case"x":return ue(te,t);case"xx":return ue(ee,t);case"xxxx":return ue(ne,t);case"xxxxx":return ue(ae,t);default:return ue(re,t)}}},{key:"set",value:function(t,e,n){return e.timestampIsSet?t:new Date(t.getTime()-n)}}]),n}(St),Xe=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",40),Pt(bt(t),"incompatibleTokens","*"),t}return Bt(n,[{key:"parse",value:function(t){return ce(t)}},{key:"set",value:function(t,e,n){return[new Date(1e3*n),{timestampIsSet:!0}]}}]),n}(St),ze=function(t){Ct(n,t);var e=kt(n);function n(){var t;xt(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return Pt(bt(t=e.call.apply(e,[this].concat(a))),"priority",20),Pt(bt(t),"incompatibleTokens","*"),t}return Bt(n,[{key:"parse",value:function(t){return ce(t)}},{key:"set",value:function(t,e,n){return[new Date(n),{timestampIsSet:!0}]}}]),n}(St),Ge={G:new Ot,y:new me,Y:new ve,R:new pe,u:new ye,Q:new ge,q:new we,M:new be,L:new Ae,w:new Ce,I:new Ee,d:new Te,D:new De,E:new Pe,e:new je,c:new Me,i:new Ue,a:new Se,b:new Oe,B:new Ne,h:new Ye,H:new Ie,K:new qe,k:new Le,m:new We,s:new He,S:new Qe,X:new Re,x:new Fe,t:new Xe,T:new ze},_e=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Ze=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Je=/^'([^]*?)'?$/,Ke=/''/g,Ve=/\S/,$e=/[a-zA-Z]/;function tn(t,e,n,r){var a,o,i,u,c,l,s,d,f,h,m,v,p,y,g,k,x,T;b(3,arguments);var D=String(t),P=String(e),j=B(),M=null!==(a=null!==(o=null==r?void 0:r.locale)&&void 0!==o?o:j.locale)&&void 0!==a?a:st;if(!M.match)throw new RangeError("locale must contain match property");var U=C(null!==(i=null!==(u=null!==(c=null!==(l=null==r?void 0:r.firstWeekContainsDate)&&void 0!==l?l:null==r||null===(s=r.locale)||void 0===s||null===(d=s.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==c?c:j.firstWeekContainsDate)&&void 0!==u?u:null===(f=j.locale)||void 0===f||null===(h=f.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==i?i:1);if(!(U>=1&&U<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var S=C(null!==(m=null!==(v=null!==(p=null!==(y=null==r?void 0:r.weekStartsOn)&&void 0!==y?y:null==r||null===(g=r.locale)||void 0===g||null===(k=g.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==p?p:j.weekStartsOn)&&void 0!==v?v:null===(x=j.locale)||void 0===x||null===(T=x.options)||void 0===T?void 0:T.weekStartsOn)&&void 0!==m?m:0);if(!(S>=0&&S<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(""===P)return""===D?A(n):new Date(NaN);var O,N={firstWeekContainsDate:U,weekStartsOn:S,locale:M},Y=[new Ut],I=P.match(Ze).map((function(t){var e=t[0];return e in _?(0,_[e])(t,M.formatLong):t})).join("").match(_e),q=[],L=gt(I);try{var W=function(){var e=O.value;null!=r&&r.useAdditionalWeekYearTokens||!$(e)||tt(e,P,t),null!=r&&r.useAdditionalDayOfYearTokens||!V(e)||tt(e,P,t);var n=e[0],a=Ge[n];if(a){var o=a.incompatibleTokens;if(Array.isArray(o)){var i=q.find((function(t){return o.includes(t.token)||t.token===n}));if(i)throw new RangeError("The format string mustn't contain `".concat(i.fullToken,"` and `").concat(e,"` at the same time"))}else if("*"===a.incompatibleTokens&&q.length>0)throw new RangeError("The format string mustn't contain `".concat(e,"` and any other token at the same time"));q.push({token:n,fullToken:e});var u=a.run(D,e,M.match,N);if(!u)return{v:new Date(NaN)};Y.push(u.setter),D=u.rest}else{if(n.match($e))throw new RangeError("Format string contains an unescaped latin alphabet character `"+n+"`");if("''"===e?e="'":"'"===n&&(e=e.match(Je)[1].replace(Ke,"'")),0!==D.indexOf(e))return{v:new Date(NaN)};D=D.slice(e.length)}};for(L.s();!(O=L.n()).done;){var H=W();if("object"===w(H))return H.v}}catch(t){L.e(t)}finally{L.f()}if(D.length>0&&Ve.test(D))return new Date(NaN);var Q=Y.map((function(t){return t.priority})).sort((function(t,e){return e-t})).filter((function(t,e,n){return n.indexOf(t)===e})).map((function(t){return Y.filter((function(e){return e.priority===t})).sort((function(t,e){return e.subPriority-t.subPriority}))})).map((function(t){return t[0]})),R=A(n);if(isNaN(R.getTime()))return new Date(NaN);var F,X=E(R,Z(R)),z={},G=gt(Q);try{for(G.s();!(F=G.n()).done;){var J=F.value;if(!J.validate(X,N))return new Date(NaN);var K=J.set(X,z,N);Array.isArray(K)?(X=K[0],wt(z,K[1])):X=K}}catch(t){G.e(t)}finally{G.f()}return X}function en(){!function(t){let e;try{e=window.localStorage;const t="__storage_test__";return e.setItem(t,t),e.removeItem(t),!0}catch(t){return t instanceof DOMException&&(22===t.code||1014===t.code||"QuotaExceededError"===t.name||"NS_ERROR_DOM_QUOTA_REACHED"===t.name)&&e&&0!==e.length}}()?console.log("Local storage not available"):localStorage.setItem("projects",JSON.stringify((new y).getProjects()))}const nn=n.p+"76e37d09b6d655a6df74761a4db546fa.svg",rn=n.p+"3850e0ebedd15efb907ffffeb5d8ca91.svg";function an(t,e){const n=document.createElement("div");n.setAttribute("id","toDoOverlay");const r=new Image(20,20);r.src=nn,r.addEventListener("click",(()=>{on(),e.removeToDo(t),en(),un(e)}));const a=[];for(let t=0;t<4;t++)a.push(new Image(20,20)),a[t].src=rn;const o=document.createElement("div");o.setAttribute("id","toDoOverlayInnerDiv");const i=document.createElement("div"),u=document.createElement("h2");u.textContent=t.title,a[0].addEventListener("click",(()=>{const n=document.createElement("form"),r=document.createElement("input");r.setAttribute("type","text");const o=document.createElement("button");o.textContent="Update",o.addEventListener("click",(n=>{t.setTitle(r.value),un(e),on(),an(t,e),en(),n.preventDefault()}));const c=document.createElement("button");c.textContent="Cancel",c.addEventListener("click",(t=>{i.replaceChildren(u,a[0]),t.preventDefault()})),n.append(r,o,c),i.replaceChildren(n)})),i.append(u,a[0]);const c=document.createElement("div"),l=document.createElement("p");l.textContent=t.description,a[1].addEventListener("click",(()=>{const n=document.createElement("form"),r=document.createElement("textarea");r.setAttribute("rows","3"),r.setAttribute("cols","20");const o=document.createElement("button");o.textContent="Update",o.addEventListener("click",(n=>{t.setDescription(r.value),un(e),on(),an(t,e),en(),n.preventDefault()}));const u=document.createElement("button");u.textContent="Cancel",u.addEventListener("click",(t=>{i.replaceChildren(l,a[1]),t.preventDefault()})),n.append(r,o,u),c.replaceChildren(n)})),c.append(l,a[1]);const s=document.createElement("div"),d=document.createElement("h2");d.textContent=t.dueDate,a[2].addEventListener("click",(()=>{const n=document.createElement("form"),r=document.createElement("input");r.setAttribute("type","date");const o=document.createElement("button");o.textContent="Update",o.addEventListener("click",(n=>{r.value?t.setdueDate(pt(tn(r.value,"yyyy-mm-dd",new Date),"mm/dd/yyyy")):t.setdueDate(""),un(e),on(),an(t,e),en(),n.preventDefault()}));const u=document.createElement("button");u.textContent="Cancel",u.addEventListener("click",(t=>{i.replaceChildren(d,a[2]),t.preventDefault()})),n.append(r,o,u),s.replaceChildren(n)})),s.append(d,a[2]);const f=document.createElement("div"),h=document.createElement("h2");h.textContent=t.priority,a[3].addEventListener("click",(()=>{const n=document.createElement("form"),r=document.createElement("select"),o=document.createElement("option");o.setAttribute("value","highPriority"),o.textContent="High";const u=document.createElement("option");u.setAttribute("value","medPriority"),u.textContent="Medium";const c=document.createElement("option");c.setAttribute("value","lowPriority"),c.textContent="Low",r.append(o,u,c);const l=document.createElement("button");l.textContent="Update",l.addEventListener("click",(n=>{t.setPriority(r.value),un(e),on(),an(t,e),en(),n.preventDefault()}));const s=document.createElement("button");s.textContent="Cancel",s.addEventListener("click",(t=>{i.replaceChildren(d,a[3]),t.preventDefault()})),n.append(r,l,s),f.replaceChildren(n)})),f.append(h,a[3]);const m=document.createElement("button");m.textContent="Close",m.addEventListener("click",on),o.append(i,c,s,f,r,m),n.appendChild(o),document.body.appendChild(n)}function on(){document.getElementById("toDoOverlay").remove()}function un(t){document.getElementById("content").replaceChildren(),function(){const t=document.getElementById("content"),e=document.createElement("div"),n=document.createElement("form"),r=document.createElement("input"),a=document.createElement("textarea"),o=document.createElement("input"),i=document.createElement("select"),u=document.createElement("option"),c=document.createElement("option"),l=document.createElement("option"),s=document.createElement("label"),d=document.createElement("label"),f=document.createElement("label"),h=document.createElement("label"),m=document.createElement("button");e.setAttribute("id","addToDo");const v=document.createElement("div");s.setAttribute("for","title"),s.textContent="Title: ",r.setAttribute("type","text"),r.setAttribute("name","title"),v.append(s,r);const p=document.createElement("div");d.setAttribute("for","description"),d.textContent="Description: ",a.setAttribute("name","description"),a.setAttribute("rows","3"),a.setAttribute("cols","20"),p.append(d,a);const y=document.createElement("div");f.setAttribute("for","dueDate"),f.textContent="Due Date: ",o.setAttribute("type","date"),o.setAttribute("name","dueDate"),y.append(f,o);const g=document.createElement("div");h.setAttribute("for","priority"),h.textContent="Priority: ",i.setAttribute("name","priority"),u.setAttribute("value","highPriority"),u.textContent="High",c.setAttribute("value","medPriority"),c.textContent="Medium",l.setAttribute("value","lowPriority"),l.textContent="Low",i.append(u,c,l),g.append(h,i),m.addEventListener("click",ln),m.textContent="Add To-Do",n.append(v,p,y,g,m),e.appendChild(n),t.appendChild(e)}(),function(t){t.itemArr.forEach((e=>{const n=document.createElement("button");n.textContent="View To-Do",n.addEventListener("click",(()=>{an(e,t)}));const r=document.getElementById("content"),a=document.createElement("div");a.setAttribute("class","toDoItem");const o=document.createElement("h2");o.textContent=e.title;const i=document.createElement("h2");i.textContent=e.dueDate;const u=document.createElement("input"),c=document.createElement("div");u.setAttribute("type","checkbox"),e.checked&&(o.style.textDecoration="line-through",i.style.textDecoration="line-through",c.style.backgroundColor="#E8fbc4",a.style.borderColor="#E8fbc4",u.checked=!0),u.addEventListener("change",(t=>{t.target.checked?(o.style.textDecoration="line-through",i.style.textDecoration="line-through",c.style.backgroundColor="#E8fbc4",t.target.parentNode.parentNode.style.borderColor="#E8fbc4",e.changeCheckStatus(),en()):(o.style.textDecoration="none",i.style.textDecoration="none",c.style.backgroundColor="#f3cdd0",t.target.parentNode.parentNode.style.borderColor="#f3cdd0",e.changeCheckStatus(),en())})),c.append(u),a.append(c,o,i,n),r.appendChild(a)}))}(t)}function cn(t,e){t.addToDo(e)}function ln(t){t.preventDefault();const e=new y,n=new FormData(t.target.form);n.get("dueDate")?cn(e.getCurrentProject(),new p(n.get("title"),n.get("description"),pt(tn(n.get("dueDate"),"yyyy-mm-dd",new Date),"mm/dd/yyyy"),n.get("priority"))):cn(e.getCurrentProject(),new p(n.get("title"),n.get("description"),null,n.get("priority"))),en(),un(e.getCurrentProject()),t.target.form.reset()}function sn(){const t=document.getElementById("sideBar"),e=document.createElement("button");e.textContent="New Project",e.addEventListener("click",g),t.appendChild(e)}function dn(){const t=new y,e=document.createElement("div"),n=document.createElement("h3");let r;localStorage.getItem("projects")?(r=JSON.parse(localStorage.getItem("projects"))[0],r=Object.assign(new v,r),r.assignToDoClass(),t.replaceMainProject(r)):(r=new v("Main"),console.log("in func"),t.addProject(r),en()),console.log(r),n.textContent=r.projectName,e.setAttribute("id","selectedProject"),e.setAttribute("class","defaultProject"),e.addEventListener("click",(()=>{document.querySelector("#selectedProject").removeAttribute("id"),vn(r),document.getElementById("sideBar").children[0].setAttribute("id","selectedProject"),un(r)})),e.appendChild(n),document.getElementById("sideBar").appendChild(e),un(r)}localStorage.getItem("projects")?(function(){const t=localStorage.getItem("projects");(new y).persistProjects(JSON.parse(t))}(),dn(),sn(),mn()):(dn(),mn(),sn());const fn=t=>{const e=new y;e.addProject(new v(t)),en(),hn(),mn(),0!==e.getCurrentProjectIndex()&&document.getElementById("sideBar").children[1+e.getCurrentProjectIndex()].setAttribute("id","selectedProject")};function hn(){document.querySelectorAll(".projects").forEach((t=>t.remove()))}function mn(){const t=new y;t.getProjects().forEach((e=>{if("Main"===e.projectName)return;const n=document.createElement("div"),r=new Image(20,20);r.src=nn,r.addEventListener("click",(n=>{t.removeProject(e),en(),n.target.parentElement.hasAttribute("id")?(vn(t.getProjects()[0]),un(t.getProjects()[0]),document.querySelector(".defaultProject").setAttribute("id","selectedProject"),hn(),mn()):(hn(),mn(),0!==t.getCurrentProjectIndex()&&document.getElementById("sideBar").children[1+t.getCurrentProjectIndex()].setAttribute("id","selectedProject"))}));const a=document.createElement("h3");a.textContent=e.projectName,n.setAttribute("class","projects"),a.addEventListener("click",(()=>{console.log(e),document.querySelector("#selectedProject").removeAttribute("id"),vn(e),0!==t.getCurrentProjectIndex()&&document.getElementById("sideBar").children[1+t.getCurrentProjectIndex()].setAttribute("id","selectedProject"),console.log(e),un(e)})),n.append(a,r),document.getElementById("sideBar").appendChild(n)}))}function vn(t){(new y).setCurrentProject(t)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,